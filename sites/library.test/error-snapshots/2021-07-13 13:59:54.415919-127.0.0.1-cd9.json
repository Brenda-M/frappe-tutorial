{
 "etype": "OperationalError",
 "evalue": "OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)\")",
 "exception": {
  "args": [
   40,
   50,
   48,
   48,
   51,
   44,
   32,
   34,
   67,
   97,
   110,
   39,
   116,
   32,
   99,
   111,
   110,
   110,
   101,
   99,
   116,
   32,
   116,
   111,
   32,
   77,
   121,
   83,
   81,
   76,
   32,
   115,
   101,
   114,
   118,
   101,
   114,
   32,
   111,
   110,
   32,
   39,
   49,
   50,
   55,
   46,
   48,
   46,
   48,
   46,
   49,
   39,
   32,
   40,
   91,
   69,
   114,
   114,
   110,
   111,
   32,
   49,
   49,
   49,
   93,
   32,
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   32,
   114,
   101,
   102,
   117,
   115,
   101,
   100,
   41,
   34,
   41
  ],
  "original_exception": [
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   82,
   101,
   102,
   117,
   115,
   101,
   100,
   69,
   114,
   114,
   111,
   114,
   40,
   49,
   49,
   49,
   44,
   32,
   39,
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   32,
   114,
   101,
   102,
   117,
   115,
   101,
   100,
   39,
   41
  ],
  "traceback": [
   39,
   84,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   40,
   109,
   111,
   115,
   116,
   32,
   114,
   101,
   99,
   101,
   110,
   116,
   32,
   99,
   97,
   108,
   108,
   32,
   108,
   97,
   115,
   116,
   41,
   58,
   92,
   110,
   32,
   32,
   70,
   105,
   108,
   101,
   32,
   34,
   47,
   104,
   111,
   109,
   101,
   46,
   46,
   46,
   116,
   105,
   111,
   110,
   82,
   101,
   102,
   117,
   115,
   101,
   100,
   69,
   114,
   114,
   111,
   114,
   58,
   32,
   91,
   69,
   114,
   114,
   110,
   111,
   32,
   49,
   49,
   49,
   93,
   32,
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   32,
   114,
   101,
   102,
   117,
   115,
   101,
   100,
   92,
   110,
   39
  ],
  "with_traceback": [
   60,
   98,
   117,
   105,
   108,
   116,
   45,
   105,
   110,
   32,
   109,
   101,
   116,
   104,
   111,
   100,
   32,
   119,
   105,
   116,
   104,
   95,
   116,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   111,
   102,
   32,
   79,
   112,
   101,
   114,
   97,
   116,
   105,
   111,
   110,
   97,
   108,
   69,
   114,
   114,
   111,
   114,
   32,
   111,
   98,
   106,
   101,
   99,
   116,
   62
  ]
 },
 "frames": [
  {
   "call": "(request=<Request 'http://library.test:8000/' [GET]>)",
   "dump": {
    "global init_request": "<function init_request>",
    "request": "<Request 'http://library.test:8000/' [GET]>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/app.py",
   "func": "application",
   "lines": {
    "50": "\t\trollback = True",
    "51": "",
    "52": "\t\tinit_request(request)",
    "53": "",
    "54": "\t\tfrappe.recorder.record()"
   },
   "lnum": 52
  },
  {
   "call": "(request=<Request 'http://library.test:8000/' [GET]>)",
   "dump": {
    "frappe. auth": "<module 'frappe.auth' from '/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/auth.py'>",
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.auth. HTTPRequest": "<class 'frappe.auth.HTTPRequest'>",
    "frappe.local.http_request": "undefined",
    "global frappe": "<module 'frappe' from '/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/app.py",
   "func": "init_request",
   "lines": {
    "124": "",
    "125": "\tif request.method != \"OPTIONS\":",
    "126": "\t\tfrappe.local.http_request = frappe.auth.HTTPRequest()",
    "127": "",
    "128": "def log_request(request, response):"
   },
   "lnum": 126
  },
  {
   "call": "(self=<frappe.auth.HTTPRequest object>)",
   "dump": {
    "self": "<frappe.auth.HTTPRequest object>",
    "self. set_lang": "<bound method HTTPRequest.set_lang of <frappe.auth.HTTPRequest object>>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "__init__",
   "lines": {
    "37": "",
    "38": "\t\t# language",
    "39": "\t\tself.set_lang()",
    "40": "",
    "41": "\t\t# load cookies"
   },
   "lnum": 39
  },
  {
   "call": "(self=<frappe.auth.HTTPRequest object>)",
   "dump": {
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.local. lang": "'en'",
    "global frappe": "<module 'frappe' from '/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "guess_language": "<function guess_language>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "set_lang",
   "lines": {
    "81": "\tdef set_lang(self):",
    "82": "\t\tfrom frappe.translate import guess_language",
    "83": "\t\tfrappe.local.lang = guess_language()",
    "84": "",
    "85": "\tdef get_db_name(self):"
   },
   "lnum": 83
  },
  {
   "call": "(lang_list=None)",
   "dump": {
    "global get_all_languages": "<function get_all_languages>",
    "lang_list": "None"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/translate.py",
   "func": "guess_language",
   "lines": {
    "34": "\tguess = None",
    "35": "\tif not lang_list:",
    "36": "\t\tlang_list = get_all_languages() or []",
    "37": "",
    "38": "\tfor l in lang_codes:"
   },
   "lnum": 36
  },
  {
   "call": "(with_language_name=False)",
   "dump": {
    ").get_value": "undefined",
    "frappe. cache": "<function cache>",
    "get_language_codes": "<function get_all_languages.<locals>.get_language_codes>",
    "global frappe": "<module 'frappe' from '/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/translate.py",
   "func": "get_all_languages",
   "lines": {
    "875": "\t\treturn frappe.cache().get_value('languages_with_name', get_all_language_with_name)",
    "876": "\telse:",
    "877": "\t\treturn frappe.cache().get_value('languages', get_language_codes)",
    "878": "",
    "879": "@frappe.whitelist(allow_guest=True)"
   },
   "lnum": 877
  },
  {
   "call": "(self=RedisWrapper<ConnectionPool<Connection<host=localhost,port=13000,db=0>>>, key=b'_ad03fa1a016ca1c4|languages', generator=<function get_all_languages.<locals>.get_language_codes>, user=None, expires=False, shared=False)",
   "dump": {
    "generator": "<function get_all_languages.<locals>.get_language_codes>",
    "val": "None"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/utils/redis_wrapper.py",
   "func": "get_value",
   "lines": {
    "78": "\t\t\tif not expires:",
    "79": "\t\t\t\tif val is None and generator:",
    "80": "\t\t\t\t\tval = generator()",
    "81": "\t\t\t\t\tself.set_value(original_key, val, user=user)",
    "82": ""
   },
   "lnum": 80
  },
  {
   "call": "()",
   "dump": {
    "frappe. db": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "frappe.db. sql_list": "<bound method Database.sql_list of <frappe.database.mariadb.database.MariaDBDatabase object>>",
    "global frappe": "<module 'frappe' from '/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/translate.py",
   "func": "get_language_codes",
   "lines": {
    "864": "\t\"\"\"Returns all language codes ar, ch etc\"\"\"",
    "865": "\tdef get_language_codes():",
    "866": "\t\treturn frappe.db.sql_list('select name from tabLanguage')",
    "867": "",
    "868": "\tdef get_all_language_with_name():"
   },
   "lnum": 866
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, query='select name from tabLanguage', values=(), debug=False)",
   "dump": {
    "debug": "False",
    "query": "'select name from tabLanguage'",
    "r": "undefined",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. sql": "<bound method Database.sql of <frappe.database.mariadb.database.MariaDBDatabase object>>",
    "values": "()"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "sql_list",
   "lines": {
    "231": "\t\t\tdoctypes = frappe.db.sql_list(\"select name from DocType\")",
    "232": "\t\t\"\"\"",
    "233": "\t\treturn [r[0] for r in self.sql(query, values, debug=debug)]",
    "234": "",
    "235": "\tdef sql_ddl(self, query, values=(), debug=False):"
   },
   "lnum": 233
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, query='select name from tabLanguage', values=(), as_dict=0, as_list=0, formatted=0, debug=False, ignore_ddl=0, as_utf8=0, auto_commit=0, update=None, explain=False)",
   "dump": {
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. connect": "<bound method Database.connect of <frappe.database.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "sql",
   "lines": {
    "109": "",
    "110": "\t\tif not self._conn:",
    "111": "\t\t\tself.connect()",
    "112": "",
    "113": "\t\t# in transaction validations"
   },
   "lnum": 111
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>)",
   "dump": {
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. _conn": "None",
    "self. get_connection": "<bound method MariaDBDatabase.get_connection of ...atabase.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "connect",
   "lines": {
    "62": "\t\t\"\"\"Connects to a database as set in `site_config.json`.\"\"\"",
    "63": "\t\tself.cur_db_name = self.user",
    "64": "\t\tself._conn = self.get_connection()",
    "65": "\t\tself._cursor = self._conn.cursor()",
    "66": "\t\tfrappe.local.rollback_observers = []"
   },
   "lnum": 64
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>)",
   "dump": {
    "frappe. conf": "{'background_workers': 1, 'file_watcher_port': 6...sword': 'CcGEznxDHMBcBIVH', 'db_type': 'mariadb'}",
    "frappe.conf. local_infile": "None",
    "global frappe": "<module 'frappe' from '/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "local_infile": "undefined"
   },
   "file": "/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/mariadb/database.py",
   "func": "get_connection",
   "lines": {
    "78": "\t\t\tssl=ssl_params if usessl else None,",
    "79": "\t\t\tconv=conversions,",
    "80": "\t\t\tlocal_infile=frappe.conf.local_infile",
    "81": "\t\t)",
    "82": ""
   },
   "lnum": 80
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, user='_ad03fa1a016ca1c4', password='CcGEznxDHMBcBIVH', host='127.0.0.1', database=None, unix_socket=None, port='', charset='utf8mb4', sql_mode=None, read_default_file=None, conv={<class 'bool'>: <function escape_bool>, <class 'int'>: <function escape_int>, <class 'float'>: <function escape_float>, <class 'str'>: <function escape_str>, <class 'bytes'>: <function escape_bytes>, <class 'tuple'>: <function escape_sequence>, <class 'list'>: <function escape_sequence>, <class 'set'>: <function escape_sequence>, <class 'frozenset'>: <function escape_sequence>, <class 'dict'>: <function escape_dict>, ...}, use_unicode=True, client_flag=3842565, cursorclass=<class 'pymysql.cursors.Cursor'>, init_command=None, connect_timeout=10, read_default_group=None, autocommit=False, local_infile=None, max_allowed_packet=16777216, defer_connect=False, auth_plugin_map=None, read_timeout=None, write_timeout=None, bind_address=None, binary_prefix=False, program_name=None, server_public_key=None, ssl=None, ssl_ca=None, ssl_cert=None, ssl_disabled=None, ssl_key=None, ssl_verify_cert=None, ssl_verify_identity=None, compress=None, named_pipe=None, passwd=None, db=None)",
   "dump": {
    "self": "<pymysql.connections.Connection object>",
    "self. connect": "<bound method Connection.connect of <pymysql.connections.Connection object>>"
   },
   "file": "/home/brenda/Desktop/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py",
   "func": "__init__",
   "lines": {
    "351": "            self._sock = None",
    "352": "        else:",
    "353": "            self.connect()",
    "354": "",
    "355": "    def __enter__(self):"
   },
   "lnum": 353
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, sock=None)",
   "dump": {
    "exc": "OperationalError(2003, \"Can't connect to MySQL s...on '127.0.0.1' ([Errno 111] Connection refused)\")"
   },
   "file": "/home/brenda/Desktop/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py",
   "func": "connect",
   "lines": {
    "662": "                if DEBUG:",
    "663": "                    print(exc.traceback)",
    "664": "                raise exc",
    "665": "",
    "666": "            # If e is neither DatabaseError or IOError, It's a bug."
   },
   "lnum": 664
  }
 ],
 "locals": {
  "exc": "OperationalError(2003, \"Can't connect to MySQL s...on '127.0.0.1' ([Errno 111] Connection refused)\")",
  "kwargs": "{}",
  "self": "<pymysql.connections.Connection object>",
  "sock": "None"
 },
 "pyver": "Python 3.6.9: /home/brenda/Desktop/frappe-bench/env/bin/python (prefix: /home/brenda/Desktop/frappe-bench/env)",
 "timestamp": "2021-07-13 13:59:54.416239",
 "traceback": "Traceback (most recent call last):\n  File \"/home/brenda/Desktop/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 614, in connect\n    (self.host, self.port), self.connect_timeout, **kwargs\n  File \"/usr/lib/python3.6/socket.py\", line 724, in create_connection\n    raise err\n  File \"/usr/lib/python3.6/socket.py\", line 713, in create_connection\n    sock.connect(sa)\nConnectionRefusedError: [Errno 111] Connection refused\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/app.py\", line 52, in application\n    init_request(request)\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/app.py\", line 126, in init_request\n    frappe.local.http_request = frappe.auth.HTTPRequest()\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/auth.py\", line 39, in __init__\n    self.set_lang()\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/auth.py\", line 83, in set_lang\n    frappe.local.lang = guess_language()\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/translate.py\", line 36, in guess_language\n    lang_list = get_all_languages() or []\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/translate.py\", line 877, in get_all_languages\n    return frappe.cache().get_value('languages', get_language_codes)\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/utils/redis_wrapper.py\", line 80, in get_value\n    val = generator()\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/translate.py\", line 866, in get_language_codes\n    return frappe.db.sql_list('select name from tabLanguage')\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/database.py\", line 233, in sql_list\n    return [r[0] for r in self.sql(query, values, debug=debug)]\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/database.py\", line 111, in sql\n    self.connect()\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/database.py\", line 64, in connect\n    self._conn = self.get_connection()\n  File \"/home/brenda/Desktop/frappe-bench/apps/frappe/frappe/database/mariadb/database.py\", line 80, in get_connection\n    local_infile=frappe.conf.local_infile\n  File \"/home/brenda/Desktop/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 353, in __init__\n    self.connect()\n  File \"/home/brenda/Desktop/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 664, in connect\n    raise exc\npymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)\")\n"
}